{% from "header.jinja" import header %}

"""{{ header() }}
See https://github.com/octokit/webhooks for more information.
"""

from typing import Any, Dict, Union
from typing_extensions import Annotated

from pydantic import Tag, Field

from githubkit.webhooks.discriminator import SchemaDiscriminator

{% for schemas in union_definitions.values() %}
{% for schema in schemas.values() %}
{% for import_ in schema.get_using_imports() %}
{{ import_ }}
{% endfor %}
{% endfor %}
{% endfor %}

{% for schema in model_definitions.values() %}
{% for import_ in schema.get_using_imports() %}
{{ import_ }}
{% endfor %}
{% endfor %}


{% for name, schemas in union_definitions.items() %}
{% if schemas | length > 1 %}
{{ pascal_case(name) }} = Annotated[Union[
    {% for schema in schemas.values() %}
    {% if schema.__class__.__name__ == "UnionSchema" %}
    Annotated[
      Union[
      {% for sub_schema in schema.schemas %}
        Annotated[{{ sub_schema.get_type_string() }}, Tag("{{ sub_schema.get_type_string() }}")],
      {% endfor %}
      ]
    , SchemaDiscriminator(
      {% for sub_schema in schema.schemas %}
        {{ sub_schema.get_type_string() }},
      {% endfor %}
    )],
    {%- else %}
    {{ schema.get_type_string() }},
    {%- endif %}
    {% endfor %}
], Field(discriminator="action")]
{% else %}
{{ pascal_case(name) }} = {{ (schemas.values() | first).get_type_string() }}
{% endif %}
{% endfor %}

WebhookEvent = Union[
    {% for name in definitions %}
    {{ pascal_case(name) }},
    {% endfor %}
]

{% macro event_name(definition) %}
{# union event #}
{% if definition.endswith("_event") %}
{{ definition[:-6] }}
{%- else %}
{# simple event #}
{{ definition.split("$")[0] }}
{%- endif %}
{% endmacro %}

webhook_action_types = {
    {% for name, schema in model_definitions.items() %}
    "{{ event_name(name) }}": {{ schema.get_type_string() }},
    {% endfor %}
    {% for name, schemas in union_definitions.items() %}
    "{{ event_name(name) }}": {
        {% for action, schema in schemas.items() %}
        "{{ action.split('$')[-1] }}": {{ schema.get_type_string() }},
        {% endfor %}
    },
    {% endfor %}
}

webhook_event_types = {
    {% for name in definitions %}
    "{{ event_name(name) }}": {{ pascal_case(name) }},
    {% endfor %}
}

__all__ = [
    {% for name in definitions %}
    "{{ pascal_case(name) }}",
    {% endfor %}
    "WebhookEvent",
    "webhook_action_types",
    "webhook_event_types",
]
